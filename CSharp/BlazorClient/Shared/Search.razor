@inject NavigationManager _navMgr
@inject IBookService _bookService 

<div class="input-group">
  <label class="input-group-text" for="inputGroupSelect01">Search by</label>
  <select class="form-select" id="inputGroupSelect01" @bind="SelectedSearch">
    <option selected>Choose...</option>
    <option value="Author" >Author</option>
    <option value="Title">Title</option>
  </select>
</div>


<div class="input-group">
    <input @bind-value="searchText"
           @bind-value:event="oninput"
           type="search"
           list="books"
           @onkeyup="HandleSearch"
           class="form-control"
           placeholder="Search..."
           @ref="searchInput"/>
    
    <div class="input-group-append">
        <button class="btn btn-primary" @onclick="SearchBooks">
            <span class="oi oi-magnifying-glass"></span>
        </button>
    </div>
</div>
@code
{
    private string searchText = string.Empty;
    protected ElementReference searchInput;
    public string SelectedSearch { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await searchInput.FocusAsync();
        }
    }

    public void SearchBooks()
    {
        if (SelectedSearch.Equals("Author"))
        {
            SearchBooksByAuthor();
        }
        if (SelectedSearch.Equals("Title"))
        {
            SearchBooksByTitle();
            
        }
    }

    public void SearchBooksByAuthor()
    {
        _navMgr.NavigateTo($"/searchByAuthor/{searchText}");
    }
    
    public void SearchBooksByTitle()
    {
        _navMgr.NavigateTo($"searchByTitle/{searchText}");
    }
    

    public async Task HandleSearch(KeyboardEventArgs args)
    {
        if (args.Key == null || args.Key.Equals("Enter"))
        {
            if (SelectedSearch.Equals("Author"))
            {
                SearchBooksByAuthor();
            }
            if (SelectedSearch.Equals("Title"))
            {
                SearchBooksByTitle();
            
            }
        
        }
        
    }
}
