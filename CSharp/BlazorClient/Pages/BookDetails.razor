@page "/BookDetails/{Isbn:long}"
@inject IBookService _bookService
@inject ICartService _cartService
@inject IAuthService _authService

@if (Book == null)
{
    <span>@Message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper">
            <img class="media-img" src="@Book.ImageUrl" alt="@Book.Title"/>
        </div>
        <div class="media-body">
            <h2 class="mb-0">@Book.Title</h2>
            <p>@Book.Description</p>
            <h4 class="price">
                $@Book.Price
            </h4>
            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart">Add to Cart</i>
            </button>
            <button class="btn btn-primary" @onclick="CreateShoppingCart">
                <i class="oi oi-basket">Create new shopping cart</i>
            </button>
            <button class="btn btn-primary" @onclick="PrintOutShoppingCart">
                            <i class="oi oi-basket">Print out shopping cart</i>
                            </button>
        </div>

    </div>
}

@code {
    public Book? Book;
    public string Message = string.Empty;
    public long OrderId { get; set; }

    [Parameter]
    public long Isbn { get; set; }

    private async Task CreateShoppingCart()
    {
        OrderDTO newOrder = new OrderDTO()
        {
            Date = DateTime.Today,
            Username = "Anne",
            Confirmed = "unconfirmed"
        };
       OrderId = await _cartService.CreateOrder(newOrder);
    }

    protected override async Task OnParametersSetAsync()
    {
        Message = "Loading products";
        var result = await _bookService.GetBookAsync(Isbn);
        if (!result.Success)
        {
            Message = result.Message;
        }
        else
        {
            Book = result.Data;
        }
    }

    private async Task AddToCart()
    {
        var orderLine = new OrderLineDTO
        {
            SerialOrder = OrderId,
            Isbn = Book.Isbn,
            Quantity = 1
        };

        await _cartService.AddToCart(orderLine);
        Console.WriteLine("Order ID is " + OrderId);
    }

    private async Task PrintOutShoppingCart()
    {
        var result = _cartService.GetCartItems(OrderId).Result;

        List<OrderLineDTO> data = new List<OrderLineDTO>();

        if (result.Data != null)
            data = result.Data;

        foreach (var order in data)
        {
            Console.WriteLine(order.Isbn);
            Console.WriteLine(order.Quantity);
            Console.WriteLine(order.SerialOrder);
        }
    }

}